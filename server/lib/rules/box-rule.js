module.exports = `/*
*  This rule been automatically generated by the auth0-box-platform extension on <%= updateTime() %>
*/
function(user, context, callback) {
  if (!(context.request.query && context.request.query.audience === 'urn:box-platform-api') &&
      !(context.request.body && context.request.body.audience === 'urn:box-platform-api')) {
    return callback(null, user, context);
  }

  user.app_metadata = user.app_metadata || {};

  if (user.app_metadata.box_appuser_id && user.app_metadata.box_appuser_folder) {
    context.accessToken['http://box-platform/appuser/id'] = user.app_metadata.box_appuser_id;
    context.accessToken['http://box-platform/appuser/folder'] = user.app_metadata.box_appuser_folder;
    return callback(null, user, context);
  }

  console.log('Creating a new Box App User...');
  var provision_appuser = {
    headers: {
      'x-api-key': '<%= apiKey %>'
    },
    url: '<%= extensionUrl %>/api/provision',
    json: {
      user: user
    }
  };
  request.post(provision_appuser, function(err, res, body) {
    if (err) {
      console.log('Error creating Box App User:', err);
      return callback(err);
    }
    if (!body) {
      console.error('Box Error:', JSON.stringify({ statusCode: res.statusCode }, null, 2));
      return callback(new UnauthorizedError('Box Error: ' + res.statusCode));
    }
    if (res.statusCode !== 200) {
      return callback(new UnauthorizedError('Box Error: ' + (body.message || body.error_description || body.error || body)));
    }
    console.log('Box App User created:', res.body.id);
    var user_id = res.body.id;
    
    var folder_id;
    var get_or_create = {
      headers: {
        'x-api-key': '<%= apiKey %>'
      },
      url: '<%= extensionUrl %>/api/user_folder',
      json: {
        email: user.email,
        id: user_id
      }
    };
    console.log('Getting or Creating a Box Folder...');
    request.post(get_or_create, function(err, res, body) {
      if (err) {
        console.log('Error creating Box folder:', err);
        return callback(err);
      }
      if (!body) {
        console.error('Box Error:', JSON.stringify({ statusCode: res.statusCode }, null, 2));
        return callback(new UnauthorizedError('Box Error: ' + res.statusCode));
      }
      if (res.statusCode !== 200) {
        return callback(new UnauthorizedError('Box Error: ' + (body.message || body.error_description || body.error || body)));
      }
      console.log('Box folder:', res.body.id);
      folder_id = res.body.id;

      return auth0.users.updateAppMetadata(user.user_id, {
          box_appuser_id: user_id,
          box_appuser_folder: folder_id
        }, function(err, updatedUser) {
          console.log('User metadta updated:', user.user_id, user_id, folder_id);
          context.accessToken['http://box-platform/appuser/id'] = user_id;
          context.accessToken['http://box-platform/appuser/folder'] = folder_id;
          callback(null, updatedUser, context);
        }
      );

    });
  });
}`;
